


macro:





/**********UI***********/


//NavBar高度

#define NAVIGATIONBAR_HEIGHT 44



//StatusBar高度

#define STATUSBAR_HEIGHT 20




/**
 获取屏幕宽高
 */
#define kScreenWidth [[UIScreen mainScreen] bounds].size.width
#define kScreenHeight [[UIScreen mainScreen] bounds].size.height




//内容视图高度

#define CONTENT_HEIGHT (kScreenHeight - NAVIGATIONBAR_HEIGHT - STATUSBAR_HEIGHT)



//kWindow

#define kWindow [UIApplication sharedApplication].keyWindow



//屏幕分辨率

#define SCREEN_RESOLUTION (kScreenWidth * kScreenHeight * ([UIScreen mainScreen].scale))



//状态栏 ＋ 导航栏 高度

#define STATUSBAR_AND_NAVIGATIONBAR_HEIGHT ((NAVIGATIONBAR_HEIGHT) + (STATUSBAR_HEIGHT))


/*
 view边框
*/
#define kViewBorderRadius(view,radius,width,color)\
[view.layer setCornerRadius:radius];\
[view.layer setMasksToBounds:YES];\
[view.layer setBorderWidth:width];\
[view.layer setBorderColor:[color CGColor]];




/*
 property属性快速声明
 */
#define kPropertyString(s)         @property(nonatomic,copy)NSString *s
#define kPropertyNSInteger(s)      @property(nonatomic,assign)NSInteger s
#define kPropertyFloat(s)          @property(nonatomic,assign)float s
#define kPropertyLongLong(s)       @property(nonatomic,assign)long long s
#define kPropertyNSDictionary(s)   @property(nonatomic,strong)NSDictionary *s
#define kPropertyNSArray(s)        @property(nonatomic,strong)NSArray *s
#define kPropertyNSMutableArray(s) @property(nonatomic,strong)NSMutableArray *s

/*
 字体
 */
#define kFontBold(X) [UIFont boldSystemFontOfSize:X]
#define kFont(X)  [UIFont systemFontOfSize:X]


/*
 定义UIImage对象
 */
#define kImageName(X)  [UIImage imageNamed:X]



/*
 view圆角
 */
#define kViewRadius(View,Radius)\
\
[View.layer setCornerRadius:(Radius)];\
[View.layer setMasksToBounds:YES]






/*********颜色********/



//带有RGBA的颜色设置

#define COLOR(R, G, B, A) [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:A]



//设置随机颜色(调试时候很有用)

#define RandomColor [UIColor colorWithRed:arc4random_uniform(256)/255.0 green:arc4random_uniform(256)/255.0 blue:arc4random_uniform(256)/255.0 alpha:1.0]



//16进制颜色

#define RGB16Color(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]


#undef    kRGB
#define kRGB(R,G,B)    [UIColor colorWithRed:R/255.0f green:G/255.0f blue:B/255.0f alpha:1.0f]

#undef    kRGBA
#define kRGBA(R,G,B,A)    [UIColor colorWithRed:R/255.0f green:G/255.0f blue:B/255.0f alpha:A]

/*
 16进制转色值
 */
#define kColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]
/*
 16进制转色值带透明度
 */
#define kColorFromRGBA(rgbValue, alphaValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0x00FF00) >> 8))/255.0 blue:((float)(rgbValue & 0x0000FF))/255.0 alpha:alphaValue]
/*
 随机色生成
 */
#define kRandomColorKRGBColor (arc4random_uniform(256)/255.0,arc4random_uniform(256)/255.0,arc4random_uniform(256)/255.0)









/*******log********/


//(在系统Log基础之上，加入自定义的相关信息)

#define NSLog(format, ...) do {  
                                           \

fprintf(stderr, "<%s : %d> %s\n",           \

[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String],  \

__LINE__, __func__);                                                        \

(NSLog)((format), ##__VA_ARGS__);                                           \

fprintf(stderr, "-------\n");                                               \

} while (0)










/******** 单例化一个类 *********/


#define SINGLETON_FOR_HEADER(className)\
\
+(className *)shared##className;


#define SINGLETON_FOR_CLASS(className)\
\
+(className *)shared##className { \
static className *shared##className = nil;\
static dispatch_once_t onceToken;\
dispatch_once(&onceToken,^{ \
shared##className =[[self alloc]init];\
});\
return shared##className;\
}








/********系统**********/


//获取当前系统版本
#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]

#define CurrentSystemVersion [[UIDevice currentDevice] systemVersion]



//获取当前系统语言

#define CurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])




//判断是不是真机

#if TARGET_OS_IPHONE
    
//iPhone Device

#endif



//判断是不是模拟器

#if TARGET_IPHONE_SIMULATOR
    
//iPhone Simulator

#endif



//是否在ARC环境下

#if __has_feature(objc_arc)
    
//compiling with ARC

#else
    
//compiling without ARC

#endif



//判断是否为iPhone

#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)



//判断是否为iPad

#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)



//判断是否为ipod

#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@"iPod touch"])



//判断是否为iPhone 5(S)(E)
#define iPhone5SE [[UIScreen mainScreen] bounds].size.width == 320.0f &&[[UIScreen mainScreen] bounds].size.height == 568.0f



//判断是否为iPhone 6/6s
#define iPhone6_6s [[UIScreen mainScreen] bounds].size.width == 375.0f &&[[UIScreen mainScreen] bounds].size.height == 667.0f



//判断是否为iPhone 6Plus/6sPlus

#define iPhone6Plus_6sPlus [[UIScreen mainScreen] bounds].size.width == 414.0f && [[UIScreen mainScreen] bounds].size.height == 736.0f






//设备

#define SCREEN_WIDTH             [UIScreen mainScreen].bounds.size.width

#define SCREEN_HEIGHT            [UIScreen mainScreen].bounds.size.height


// iPhone 机型(尺寸大小)判断

#define IPHONE_SE                SCREEN_HEIGHT == 568

#define IPHONE_8                 SCREEN_HEIGHT == 667

#define IPHONE_8P                SCREEN_HEIGHT == 736

#define IPHONE_X                 SCREEN_HEIGHT == 812


// iPhone X 导航栏高度

#define IPHONE_X_NAV_H           44.0f

// iPhone X 状态栏高度

#define IPHONE_X_STATUSBAR_H     44.0f

// iPhone X 工具栏高度

#define IPHONE_X_TOOLBAR_H       83.0f



// 其他 iPhone 导航栏高度

#define IPHONE_NAV_H             44.0f

// 其他 iPhone 状态栏高度

#define IPHONE_STATUSBAR_H       20.0f

// 其他 iPhone 工具栏高度

#define IPHONE_TOOLBAR_H         49.0f




//判断 iOS 或更高的系统版本


#define IOS_VERSION_6_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue]>=6.0)? (YES):(NO))


#define IOS_VERSION_7_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue]>=7.0)? (YES):(NO))


#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue]>=8.0)? (YES):(NO))


#define IOS_VERSION_9_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue]>=9.0)? (YES):(NO))


#define IOS_VERSION_10_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue]>=10.0)? (YES):(NO))


//系统版本工具


#define SYSTEM_VERSION_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)


#define SYSTEM_VERSION_GREATER_THAN(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)


#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)


#define SYSTEM_VERSION_LESS_THAN(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)


#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)





//APP版本号
#define kAppVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"]

//获取当前语言
#define kCurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])


//检测是否是竖屏状态

#define IsPortrait ([UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationPortrait || [UIApplication sharedApplication].statusBarOrientation == UIInterfaceOrientationPortraitUpsideDown)









/**********通知**********/



//获取通知中心

#define NotificationCenter [NSNotificationCenter defaultCenter]



//快速发通知

#define Post_Notify(_notificationName, _obj, _userInfoDictionary) [[NSNotificationCenter defaultCenter] postNotificationName: _notificationName object: _obj userInfo: _userInfoDictionary];



//添加观察者

#define Add_Observer(_notificationName, _observer, _observerSelector, _obj) [[NSNotificationCenter defaultCenter] addObserver:_observer selector:@selector(_observerSelector) name:_notificationName object: _obj];



//移除观察者

#define Remove_Observer(_observer) [[NSNotificationCenter defaultCenter] removeObserver: _observer];







/*********数据存储**********/


//NSUserDefaults 实例化

#define USER_DEFAULT [NSUserDefaults standardUserDefaults]



//获取temp

#define kPathTemp NSTemporaryDirectory()



//获取沙盒Document

#define kPathDocument [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) firstObject]



//获取沙盒Cache

#define kPathCache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory,NSUserDomainMask, YES) firstObject]





/********时间*******/


//获取系统时间戳
#define CurentTime [NSString stringWithFormat:@"%ld", (long)[[NSDate date] timeIntervalSince1970]]







/********权限*******/


//获取相机权限状态

#define CameraStatus [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo]
#define CameraDenied ((CameraStatus == AVAuthorizationStatusRestricted)||(CameraStatus == AVAuthorizationStatusDenied))


#define CameraAllowed (!CameraDenyed)



/** 定位权限*/

#define LocationStatus [CLLocationManager authorizationStatus];

#define LocationAllowed ([CLLocationManager locationServicesEnabled] && !((status == kCLAuthorizationStatusDenied) || (status == kCLAuthorizationStatusRestricted)))

#define LocationDenied (!LocationAllowed)




/** 消息推送权限*/

#define PushClose (([[UIDevice currentDevice].systemVersion floatValue]>=8.0f)?(UIUserNotificationTypeNone == [[UIApplication sharedApplication] currentUserNotificationSettings].types):(UIRemoteNotificationTypeNone == [[UIApplication sharedApplication] enabledRemoteNotificationTypes]))


#define PushOpen (!PushClose)








/********本地文件加载*******/


#define LoadImage(file,type) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]

#define LoadArray(file,type) [NSArray arrayWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]

#define  LoadDict(file,type) [NSDictionary dictionaryWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]


//获取沙盒Document路径
#define kDocumentPath [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]

//获取沙盒Cache路径
#define kCachePath [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]







/*********Block**********/

//弱引用

#define WeakWithNameAndObject(obj,name)   __weak   typeof(obj) weak##name   = obj


//强引用

#define StrongWithNameAndObject(obj,name) __strong typeof(obj) strong##name = obj








